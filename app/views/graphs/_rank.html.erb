<div class="canvas-container">
  <canvas id="RankLineChart<%= play_type %>" class="rank-line-graph"></canvas>
</div>
<script>
  $(document).on('turbolinks:load', function() {
    // // *****************************
    // const totalDuration = 10000;
    // const delayBetweenPoints = totalDuration / data.length;
    // const previousY = (ctx) => ctx.index === 0 ? ctx.chart.scales.y.getPixelForValue(100) : ctx.chart.getDatasetMeta(ctx.datasetIndex).data[ctx.index - 1].getProps(['y'], true).y;
    // const animation = {
    //   x: {
    //     type: 'number',
    //     easing: 'linear',
    //     duration: delayBetweenPoints,
    //     from: NaN, // the point is initially skipped
    //     delay(ctx) {
    //       if (ctx.type !== 'data' || ctx.xStarted) {
    //         return 0;
    //       }
    //       ctx.xStarted = true;
    //       return ctx.index * delayBetweenPoints;
    //     }
    //   },
    //   y: {
    //     type: 'number',
    //     easing: 'linear',
    //     duration: delayBetweenPoints,
    //     from: previousY,
    //     delay(ctx) {
    //       if (ctx.type !== 'data' || ctx.yStarted) {
    //         return 0;
    //       }
    //       ctx.yStarted = true;
    //       return ctx.index * delayBetweenPoints;
    //     }
    //   }
    // };
    // // *****************************


    var ctx = document.getElementById("RankLineChart<%= play_type %>");
    var rankLineChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: ['', '', '', '', '', '', '', '', '', ''],
        datasets: [
          {
            label: '順位',
            data: <%= @rank_data[play_type].to_json %>, // .to_jsonはnilをnullに変換するため
            borderColor: "rgba(252, 108, 133)",
            backgroundColor: "rgba(0,0,0,0)",
            tension: 0
          }
        ],
      },
      options: {
        animation: false,
        // animation,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            enabled: false, // マウスオーバー時のツールチップを非表示
          }
        },
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y:{
            max: <%= play_type %>,
            min: 1,
            reverse: true, // y軸反転
            ticks: {
              stepSize: 1,
              userCallback: function(label, index, labels) {
                if (Math.floor(label) === label) {
                  return label;
                }
              }
            },
          },
          x:{
            stacked: true,
            grid: {
              display: false, // 横軸のグリッド（縦線たち）を非表示
            },
          },
        },
      }
    });



  });
</script>